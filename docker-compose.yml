

services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - mbta_pipeline_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    networks:
      - mbta_pipeline_network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    hostname: kafka
    restart: always
    depends_on:
      - zookeeper
    networks:
      - mbta_pipeline_network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  kafka-topic-init:
    image: confluentinc/cp-kafka:7.3.0
    restart: "no"
    depends_on:
      - kafka
    networks:
      - mbta_pipeline_network    
    entrypoint: ["/bin/bash", "-c"]
    command: >
      bash -c "
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --replication-factor 1 --partitions 1 --topic mbta_alerts &&
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --replication-factor 1 --partitions 1 --topic mbta_routes &&
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --replication-factor 1 --partitions 1 --topic mbta_stops &&
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --replication-factor 1 --partitions 1 --topic mbta_vehicles &&
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --replication-factor 1 --partitions 1 --topic mbta_predictions &&
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --replication-factor 1 --partitions 1 --topic mbta_schedules &&
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --replication-factor 1 --partitions 1 --topic mbta_lines &&
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --replication-factor 1 --partitions 1 --topic mbta_facilities
      "


  airflow-webserver:
    build: .
    container_name: airflow-webserver
    restart: always
    depends_on:
      - postgres
    networks:
      - mbta_pipeline_network
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: 'v1mGWASuazSVeq_Ch1uxEYbNS6r9ddQ8TAA5VqenZRg='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    entrypoint: >
      bash -c "airflow db upgrade &&
               airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
               airflow webserver"

  airflow-scheduler:
    build: .
    container_name: airflow-scheduler
    restart: always
    depends_on:
      - airflow-webserver
    networks:
      - mbta_pipeline_network
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    entrypoint: >
      bash -c "airflow db upgrade && airflow scheduler"

  kafka_producer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka_producer
    depends_on:
      - kafka
      - kafka-topic-init
    restart: always
    networks:
      - mbta_pipeline_network
    volumes:
      - .:/app
    env_file:
      - .env
    working_dir: /app
    command: >
      bash -c "sleep 40 && python mbta_data_pipeline.py"

  kafka_consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka_consumer
    depends_on:
      - kafka
      - kafka-topic-init
    restart: always
    networks:
      - mbta_pipeline_network
    volumes:
      - .:/app
    env_file:
      - .env
    working_dir: /app
    command: >
      bash -c "sleep 45 && python ./airflow/dags/mbta_kafka_consumer.py"

networks:
  mbta_pipeline_network:
    driver: bridge
